/***************************************************************
--
-- ASSIGNMENT 02 - ANALYSIS AND NORMALIZATION
-- AUTHOR: 
--          TANYA GRIMES
--		   
-- DATE: SATURDAY, JUNE 27, 2020
--
****************************************************************
--
-- LEGEND:
   *      - FLAGS MISSING/INCONSISTENT/INCORRECT DATA OR FORMATS
   Q      - REGULAR QUESTIONS INVESTIGATING NATURE OF DATA
   BR	  - BUSINESS RULES
   1NF	  - FIRST NORMAL FORM
   2NF	  - SECOND NORMAL FORM
   3NF	  - THIRD NORMAL FORM
   **     - OTHER NOTES
   source - IDENTIFIES ADDITIONAL SOURCES USED, OUTSIDE OF THOSE
            MENTIONED IN ASSIGNMENT INSTRUCTIONS 
--
****************************************************************/



-- ABOUT THE COMPANY
-----------------------------------
-- ** ONLY 2 SIMPLE QUERIES USED TO VIEW THE TABLE FOR THE FIRST TIME
-- ** THEY ARE NOT MEANT TO BE PART OF ANY HEAVY ANALYSIS

-- Q: WHAT IS THE BUSINESS ABOUT GENERALLY?
SELECT * FROM [Messy].[dbo].[Messy]
--   24,836 records
--   THE COMPANY PROVIDES CUSTOMER ORDERS AND SELLS PRODUCTS
SELECT DISTINCT ProductTags FROM [Messy].[dbo].[Messy]
--   THE COMPANY IS SELLING GARDEN TOOLS


-- DESIGN INCONSISTENCIES
-----------------------------------

-- Q: WHAT ARE THE DATA TYPES OF THE COLUMNS?
USE Messy;
SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'Messy'
-- *1. ORDER NO COLUMN HAS THE POTENTIAL TO BE A UNIQUE IDENTIFIER (AFTER NORMALIZATION) BUT IT IS A VARCHAR INSTEAD OF AN INT TYPE

-- *2. SALE DATE COLUMN IS A VARCHAR EVEN THOUGH IT REPRESENTS DATE DATA. IT SHOULD BE CHANGED TO TIMESTAMP DATA TYPE FOR ACCURATE CAPTURE OF SALE

-- *3. THERE IS NO UNIQUE IDENTIFIER TO REPRESENT CUSTOMERS. CLOSEST IS CUSTOMER NAME WHICH IS A VARCHAR

-- *4. REPEAT CUSTOMER COLUMN REPRESENTS BOOLEAN DATA, BUT STORES VARCHAR INSTEAD. CAN LEAD TO INVALID DATA DUE TO TYPOS
SELECT RepeatCustomer, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY RepeatCustomer
-- ONLY TWO OPTIONS AVAILABLE FOR THIS COLUMN: YES AND NO. SHOULD BE A BOOLEAN/BIT DATA TYPE INSTEAD

-- *5. CUSTOMER ADDRESS COLUMNS ARE GENERICALLY LABELLED, INSTEAD OF SPECIFICALLY DESCRIBING THE DATA, E.G. STREET NAME OR POSTAL CODE

-- *6. DISCOUNT APPLIED PC COLUMN IS A VARCHAR EVEN THOUGH IT REPRESENTS A DISCOUNT THAT CAN PARTICIPATE IN A CALCULATION
SELECT DiscountAppliedPc, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY DiscountAppliedPc
-- BESIDES NULL, DATA RETURNS NUMBERS, CONFIRMING THIS COLUMN SHOULD BE NUMERIC OR INTEGER
-- PC IN THE COLUMN NAME MAY STAND FOR PERCENTAGE, WHICH COULD EXPLAING INTEGER VALUES IN THE COLUMN

-- Q: IS THE CURRENT FORMAT OF PHONE-NUMBERS ACCEPTABLE? 
SELECT LEN(CustomerPhoneNo), COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY LEN(CustomerPhoneNo)
-- THE PHONE NUMBERS ARE CURRENTLY DIFFERENT LENGTHS.
-- Q: IS THIS VALID?
SELECT CustomerPhoneNo FROM [Messy].[dbo].[Messy]
WHERE CustomerPhoneNo LIKE '% %'
-- SOME CONTAIN SPACES, HENCE THE LENGTH DIFFERENCE, HOWEVER STRUCTURE LOOKS LIKE SAME
-- *7. THIS SUGGESTS INCONSISTENT DATA ENTRY INSTEAD OF DIFFERENT PHONE FORMATS (E.G. CANADIAN VS. INTERNATIONAL)


-- Q: ARE NULLS VALID IN THE PRODUCT DESCRIPTION COLUMN?
SELECT ProductDescription, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY ProductDescription
ORDER BY ProductDescription
-- 1675 PRODUCTS HAVE NO DESCRIPTION
-- POSSIBLY VALID IF THE PRODUCT IS VERY NEW, AND THERE IS A SECONDARY DESCRIPTION WITH THE PRODUCT TAG


-- Q: ARE PRODUCT TAGS UNIQUE TO EACH PRODUCT?
SELECT ProductTags, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY ProductTags
-- 15 ROWS
-- THE GROUPINGS REUSE THE SAME TAGS IN DIFFERENT ORDERS. THEY ARE REPETITIVE
-- *8. TAGS ARE NOT UNIQUE TO EACH PRODUCT AND CAN BE FURTHER DIVIDED AS INDIVIDUAL CATEGORIES TO AVOID DUPLICATES DUE TO TYPOS
--     SEPARATION WOULD MAKE IT EASIER TO UPDATE OR DELETE, BECAUSE THEY WOULD NOT ALL BE IN THE SAME STRING. SEE MORE IN NORMALIZATION SECTION


-- Q: IS THE CUSTOMERNAME COLUMN VALID?
SELECT DISTINCT CustomerName FROM [Messy].[dbo].[Messy]
ORDER BY CustomerName
-- 5,109 RECORDS
-- SOME CUSTOMERS HAVE NULL NAMES
-- *9. NO, CUSTOMERS BY DEFINTION HAVE MADE A PURCHASE AND BASIC INFORMATION LIKE THEIR NAME SHOULD BE CAPTURED FOR LEGAL PURPOSES / ACCOUNTABILITY / AUDIT
-- *10. SOME CUSTOMER NAMES ARE UPPER CASE, WHILE OTHERS ARE PROPER CASE. THIS SHOULD BE ADJUSTED FOR CONSISTENCY


-- Q: ARE THERE DUPLICATE PURCHASES WITHIN AN ORDER NO FOR ANY CUSTOMER AND PRODUCT ID?
SELECT CustomerName, ProductID, OrderNo, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY CustomerName, ProductID, OrderNo
HAVING CUSTOMERNAME IS NOT NULL AND COUNT(*) > 1
ORDER BY CustomerName, ProductID, OrderNo
-- 165 RECORDS
-- YES, THERE ARE. 
-- Q: WHY IS THAT? USING ONE EXAMPLE
SELECT * FROM [Messy].[dbo].[Messy]
WHERE CustomerName = 'Abraham Buckley' AND ProductID = 567697
-- EACH DUPLICATE REPRESENTS AN INCREASE IN QUANTITY
-- *11. THERE SHOULD BE A QUANTITY COLUMN, ASSOCIATED WITH EACH ITEM IN AN ORDER TO PREVENT ADDING
--      DUPLICATE ROWS JUST TO SHOW AN ITEM WAS PURCASED MULTIPLE TIMES WITHIN AN ORDER
-- Q: ARE THERE ANY OTHER OBSERVATIONS?
SELECT * FROM [Messy].[dbo].[Messy]
WHERE CustomerName = 'Abraham Buckley'
-- YES, LINE ITEM PRICE IS NULL
-- FROM THE QUERY BEFORE, THE LINE ITEM PRICE SEEMS TO REPRESENT THE PRICE OF AN ITEM
-- *12. THERE ARE ITEMS WITHOUT PRICES. EVERY ITEM SHOULD HAVE A PRICE
-- Q: PRODUCT ID, 493648, WAS ADDED TO THE ORDER, EVEN THOUGH IT IS NULL. WHY WAS IT THERE?
-- *13. THERE IS NO FURTHER INFORMATION PROVIDED ABOUT NULL LINE ITEM PRICE VALUES. E.G. WAS THIS A FREE SAMPLE? CURRENTLY UNKNOWN


-- Q: DO THE CUSTOMER ADDRESS COLUMNS 3,4 REPRESENT NESTED BOUNDARIES? E.G. KITCHENER VS. WATERLOO REGION?
SELECT COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
WHERE CustomerAddress3 IS NOT NULL AND CustomerAddress3 != '' AND CustomerAddress4 IS NOT NULL AND CustomerAddress4 != ''
-- CURRENTLY, THERE ARE NO RECORDS WHERE BOTH CUSTOMER ADDRESS 3 AND 4 ARE FILLED IN
SELECT CustomerAddress3, CustomerAddress4, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY CustomerAddress3, CustomerAddress4
-- THIS SUGGESTS THAT THERE ARE TWO COMPETING COLUMNS REPRESENTING THE SAME LEVEL OF DATA AND ARE NOT NESTED WITHIN EACH OTHER
-- *14. DATA REPRESENTING THE SAME DATA SHOULD BE MERGED INTO ONE COLUMN
-- *15. BOTH COLUMNS CONTAIN BOTH EMPTY STRINGS AND NULL VALUES. THERE SHOULD ONLY BE ONE WAY USED TO REPRESENT MISSING DATA FOR CONSISTENCY


-- Q: ARE THERE INCONSISTENCIES IN THE CUSTOMER ADDRESS 1 COLUMN?
SELECT CustomerAddress1, COUNT(*) FROM [Messy].[dbo].[Messy]
GROUP BY CustomerAddress1
HAVING CustomerAddress1 LIKE '%blvd%' OR CustomerAddress1 LIKE '%Boulevard%'
-- 1017 ROWS
-- *16. THE ADDRESS STREET ENDINGS ARE INCONSISTENLY ADDED, AS SEEN WITH QUERY FOR BOULEVARD ABOVE


-- Q: ARE THERE NULL VALUES IN TOTAL SALE PRICE COLUMN?
SELECT TotalSalePrice FROM [Messy].[dbo].[Messy]
WHERE TotalSalePrice IS NULL
-- 48 RECORDS
-- *17. YES, IF THIS COLUMN IS PLANNING TO EXIST AS A TOTAL FOR THE ITEMS PURCHASED IN EACH ORDER, IT SHOULD NOT BE NULL


-- Q: WHAT IS THE NEW TOTAL SALE PRICE COLUMN?
SELECT OrderNo, ProductID, ProductTags, LineItemPrice, TotalSalePrice, PromoCode, DiscountAppliedPc, DiscountAppliedAbs, NewTotalSalePrice FROM [Messy].[dbo].[Messy]
-- WHERE CustomerName = 'Abraham Buckley'
WHERE PromoCode IS NOT NULL
-- BASED ON A FEW SPOT CHECKS, NEW TOTAL SALE PRICE IS THE SALE PRICE AFTER A DISCOUNT HAS BEEN APPLIED
-- Q: ARE THERE NULL VALUES IN THE NEW TOTAL SALE PRICE?
SELECT NewTotalSalePrice FROM [Messy].[dbo].[Messy]
WHERE NewTotalSalePrice IS NULL
-- 48 ROWS
-- *18. IF THIS COLUMN NEEDS TO STAY, E.G. A BUSINESS RULE REQUIRES IT, THEN IT SHOULD NOT BE NULL


-- Q: ARE THERE CASES WHERE BOTH SALE PRICES ARE NULL FOR ORDERS?
SELECT DISTINCT OrderNo FROM [Messy].[dbo].[Messy]
WHERE TotalSalePrice IS NULL AND NewTotalSalePrice IS NULL
-- 47 RECORDS
-- *19. AN ORDER SHOULD NOT HAVE MISSING SALE DATA UNLESS THESE COLUMNS ARE BEING CALCULATED ON THE FLY. 
--      AND IF SO, THEN THESE COLUMNS SHOULD NOT BE IN THE TABLE


-- Q: ARE THERE CASES WHERE NO SALE PRICES REPORTED FOR ORDERS?
SELECT DISTINCT OrderNo FROM [Messy].[dbo].[Messy]
WHERE TotalSalePrice IS NULL AND NewTotalSalePrice IS NULL AND LineItemPrice IS NULL
-- 47 RECORDS, SAME AS ABOVE
-- *20. WHAT DO THESE RECORDS ACTUALLY REPRESENT? WAS THE ORDER CANCELLED? OR THERE JUST MISSING PRICE INFO?
--      THIS IS AN ERROR TO BE ADDRESSED WHERE ORDERS ARE REPORTED WITH NO SALE PRICES ASSOCIATED WITH THEM AT ALL


-- Q: ARE THERE CASES WHERE BOTH THE PRODUCT DESCRIPTION AND PRODUCT TAG IS MISSING FOR A PRODUCT?
SELECT ProductID, ProductTags, ProductDescription FROM [Messy].[dbo].[Messy] 
WHERE ProductTags IS NULL AND ProductDescription IS NULL
-- 762 RECORDS
-- *21. YES, SINCE THERE IS NO OTHER DESCRIPTIVE INFORMATION PROVIDED FOR EACH PRODUCT, BOTH OF THESE COLUMNS CANNOT BE NULL AT THE SAME TIME


-- Q: ARE THERE DUPLICATES IN THE ORDER NO COLUMN?
SELECT OrderNo, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY OrderNo
HAVING COUNT(*) > 1
-- *22. THE CLOSEST MAIN ID IN THIS TABLE THAT REPRESENTS THE MAIN PURPOSE OF THE TABLE IS ORDER NO.
--      HOWEVER, IT CURRENTLY CONTAINS DUPLICATES, PREVENTING IT TO UNIQUELY IDENTIFY RECORDS ON ITS OWN


-- Q: ARE THERE DUPLICATES IN THE PRODUCTID COLUMN?
SELECT ProductID, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY ProductID
HAVING COUNT(*) > 1
-- YES, BUT DUE TO THE NATURE OF THE TABLE, THESE ARE EXPECTED SINCE MANY ORDERS CAN CONTAIN MANY PRODUCTS
-- DIFFICULT TO SEE IF THERE ARE DUPLICATES DUE TO ERRONEOUS DATA.


-- Q: IS THERE AN OVERLAP BETWEEN THE TWO DISCOUNT COLUMNS?
SELECT COUNT(*) Frequency_Of_Overlap FROM [Messy].[dbo].[Messy]
WHERE DiscountAppliedAbs IS NOT NULL AND DiscountAppliedPc IS NOT NULL
-- NO OVERLAP


-- Q: HOW MANY UNIQUE PERCENT AND DOLLAR DISCOUNTS ARE THERE?
SELECT DiscountAppliedPc, DiscountAppliedAbs, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY DiscountAppliedPc, DiscountAppliedAbs
-- 3 FOR PERCENT, 2 FOR DOLLAR



-- DEEP ANALYSIS REPORTING
-----------------------------------

-- Q: WHAT IS THE AVERAGE NUMBER OF CUSTOMERS PER ORDER?
-- **: AVG will truncate the value to INT. Need to convert to Decimal BEFORE finding the average
SELECT AVG(CONVERT(DECIMAL,Frequency)) Average
FROM (
   SELECT CustomerName, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
   GROUP BY CustomerName 
)AS AverageD
-- CONVERT source: https://social.msdn.microsoft.com/Forums/sqlserver/en-US/3624de71-3187-4f9e-b242-33af195b2a97/avg-function-on-an-integer-column-truncation?forum=transactsql
-- Subquery source: https://www.codeproject.com/Questions/1041673/Combining-count-and-avg-functions-in-SQL-MySQL


-- Q: WHICH CUSTOMERS RECEIVED DISCOUNTS?
SELECT CustomerName, OrderNo, PromoCode, COUNT(*) FROM [Messy].[dbo].[Messy]
GROUP BY CustomerName, PromoCode, OrderNo
HAVING PromoCode IS NOT NULL


-- Q: HOW MANY REPEAT CUSTOMERS TOOK ADVANTAGE OF THE DISCOUNTS?
SELECT COUNT(DISTINCT CustomerName) FROM [Messy].[dbo].[Messy]
WHERE RepeatCustomer = 'Yes' AND PromoCode IS NOT NULL


-- Q: WHAT ARE THE MOST FREQUENTLY SOLD PRODUCTS?
SELECT ProductID, ProductDescription, ProductTags, LineItemPrice, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY ProductID, ProductDescription, ProductTags, LineItemPrice
ORDER BY COUNT(*) DESC


-- Q: WHAT IS THE RATIO OF REPEAT CUSTOMERS TO FIRST TIME CUSTOMERS IN EACH CITY?
SELECT CustomerAddress2 AS City, [Yes] AS Repeat_Customer, [No] AS First_Time_Customer
FROM 
   ( SELECT CustomerAddress2, RepeatCustomer
     FROM [Messy].[dbo].[Messy]
	 WHERE CustomerAddress2 IS NOT NULL
   ) CustomerType
PIVOT
   ( COUNT (RepeatCustomer)
     FOR RepeatCustomer IN ( [Yes], [No])
   ) AS PvtCustomerType
ORDER BY Repeat_Customer DESC
-- pivot source: https://www.mssqltips.com/sqlservertip/1019/crosstab-queries-using-pivot-in-sql-server/


-- Q: HOW FREQUENTLY ARE PRODUCTS PURCHASED BY PRODUCT TAG CATEGORY IN EACH PROMO CODE GROUP? 
SELECT ProductTags, [DISCOUNT10] AS DISCOUNT10, [FIVEOFF] AS FIVEOFF, [PROMO10] AS PROMO10, 
[SPRING15] AS SPRING15, [STAFFDISC] AS STAFFDISC
FROM 
   ( SELECT ProductTags, PromoCode, ProductID
     FROM [Messy].[dbo].[Messy]
	 WHERE PromoCode IS NOT NULL AND ProductTags IS NOT NULL
   ) PROMOS
PIVOT
   ( COUNT (ProductID)
     FOR PromoCode IN ( [DISCOUNT10], [FIVEOFF], [PROMO10], [SPRING15], [STAFFDISC])
   ) AS PVTPROMO
ORDER BY ProductTags
-- pivot source: https://www.mssqltips.com/sqlservertip/1019/crosstab-queries-using-pivot-in-sql-server/


-- Q: WHICH AREAS GENERATE THE MOST SALES BY POSTAL CODE?
SELECT CustomerAddress5, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
GROUP BY CustomerAddress5
HAVING CustomerAddress5 IS NOT NULL
ORDER BY COUNT(*) DESC


-- Q: WHAT IS THE ASSET TURNOVER RATIO FOR THE COMPANY SALES?
--    THIS RATIO MEASURES A COMPANY'S ABILITY TO GENERATE SALES FROM ASSETS
--    source: https://corporatefinanceinstitute.com/resources/knowledge/finance/financial-ratios/
SELECT COUNT(DISTINCT OrderNo) 'Total Number Of Sales', 
	   COUNT(DISTINCT ProductID) 'Total Types of Assets', 
	   COUNT(DISTINCT OrderNo) / COUNT(DISTINCT ProductID) 'Asset Turnover Ratio' 
FROM [Messy].[dbo].[Messy]


-- Q: WHAT IS THE RETURN ON ASSETS RATIO FOR THE COMPANY SALES?
--    THIS RATIO MEASURES HOW EFFICIENTLY A COMPANY IS USING ITS ASSETS
--    source: https://corporatefinanceinstitute.com/resources/knowledge/finance/financial-ratios/
--    NOTE: FOR THIS EXERCISE, ASSUMING TOTAL SALES IS ALSO NET INCOME, EVEN THOUGH THIS IS NOT THE CASE IN REAL LIFE
-- Select sum of NewTotalSalePrice for each order where the price is not null, 
SELECT (
			SELECT SUM(NewTotalSalePrice)
			FROM (
				SELECT NewTotalSalePrice, OrderNo, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
				GROUP BY NewTotalSalePrice, OrderNo
				HAVING NewTotalSalePrice IS NOT NULL 
			) Grouped_Sum
	) 'Net Income',
COUNT(ProductID) 'Total Types of Assets',
-- Select the same sum above / count above, 
FORMAT((
	SELECT SUM(NewTotalSalePrice)
	FROM (
		SELECT NewTotalSalePrice, OrderNo, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
		GROUP BY NewTotalSalePrice, OrderNo
		HAVING NewTotalSalePrice IS NOT NULL 
	) AS Grouped_Sum
) / COUNT(ProductID),'N2') 'Asset Turnover Ratio'
FROM [Messy].[dbo].[Messy]


-- Q: COMPARE NUMBER OF CUSTOMERS TO SALES INFORMATION
SELECT COUNT(DISTINCT CustomerName) 'Number of Customers',
	   COUNT(DISTINCT OrderNo) 'Number of Sales',
	   (
			SELECT SUM(NewTotalSalePrice)
			FROM (
				SELECT NewTotalSalePrice, OrderNo, COUNT(*) Frequency FROM [Messy].[dbo].[Messy]
				GROUP BY NewTotalSalePrice, OrderNo
				HAVING NewTotalSalePrice IS NOT NULL 
			) Grouped_Sum
		) 'Total Sale Price' 
FROM [Messy].[dbo].[Messy]


-- Q: COMPARE DOLLAR DISCOUNTS TO PERCENT DISCOUNTS
SELECT 'Total Number',
    COUNT(DiscountAppliedAbs) Dollar_Discounts,
    COUNT(DiscountAppliedPc) Percent_Discounts
FROM [Messy].[dbo].[Messy]
UNION
SELECT 'Total Value',
    SUM(DiscountAppliedAbs) Dollar_Discounts,
    SUM(CAST(DiscountAppliedPc AS INT)) Percent_Discounts
FROM [Messy].[dbo].[Messy]
UNION
SELECT 'Average',
    AVG(DiscountAppliedAbs) Dollar_Discounts,
    AVG(CAST(DiscountAppliedPc AS INT)) Percent_Discounts
FROM [Messy].[dbo].[Messy]
UNION
SELECT 'Min',
    MIN(DiscountAppliedAbs) Dollar_Discounts,
    MIN(CAST(DiscountAppliedPc AS INT)) Percent_Discounts
FROM [Messy].[dbo].[Messy]
UNION
SELECT 'Max',
    MAX(DiscountAppliedAbs) Dollar_Discounts,
    MIN(CAST(DiscountAppliedPc AS INT)) Percent_Discounts
FROM [Messy].[dbo].[Messy]
-- summary source: http://www.silota.com/docs/recipes/sql-summary-statistics.html


--Q: COMPARE PRICES BY YEAR
SELECT '2016 < 300',
    COUNT(DISTINCT OrderNo) Frequency
FROM [Messy].[dbo].[Messy]
WHERE LineItemPrice <300 AND SaleDate Like '2016%'
UNION
SELECT '2016 > 300',
    COUNT(DISTINCT OrderNo) Frequency
FROM [Messy].[dbo].[Messy]
WHERE LineItemPrice >300 AND SaleDate Like '2016%'
UNION
SELECT '2015 < 300',
    COUNT(DISTINCT OrderNo) Frequency
FROM [Messy].[dbo].[Messy]
WHERE LineItemPrice <300 AND SaleDate Like '2015%'
UNION
SELECT '2015 > 300',
    COUNT(DISTINCT OrderNo) Frequency
FROM [Messy].[dbo].[Messy]
WHERE LineItemPrice >300 AND SaleDate Like '2015%'
-- summary source: http://www.silota.com/docs/recipes/sql-summary-statistics.html


-- Q: TOTAL SALE OF THE STORE IN DOLLARS in 2015
SELECT COUNT(DISTINCT CustomerName) 'Number of Customers',
	   COUNT(DISTINCT OrderNo) 'Number of Sales',
	   (
			SELECT SUM(NewTotalSalePrice)
			FROM (
				SELECT DISTINCT(OrderNo),NewTotalSalePrice FROM [Messy].[dbo].[Messy]
				WHERE SaleDate Like '2015%'
				GROUP BY NewTotalSalePrice, OrderNo 
			) Grouped_Sum 
		) 'Total Sale Price' 
FROM [Messy].[dbo].[Messy] WHERE SaleDate Like '2015%'


-- Q: TOTAL SALE OF THE STORE IN DOLLARS in 2016
SELECT COUNT(DISTINCT CustomerName) 'Number of Customers',
	   COUNT(DISTINCT OrderNo) 'Number of Sales',
	   (
			SELECT SUM(NewTotalSalePrice)
			FROM (
				SELECT DISTINCT(OrderNo),NewTotalSalePrice FROM [Messy].[dbo].[Messy]
				WHERE SaleDate Like '2016%'
				GROUP BY NewTotalSalePrice, OrderNo 
			) Grouped_Sum 
		) 'Total Sale Price' 
FROM [Messy].[dbo].[Messy] WHERE SaleDate Like '2016%'


-- Q: TOTAL SALE OF THE STORE in 2015 BY PRODUCT PRICE OR LINE NUMBER
SELECT COUNT(DISTINCT LineItemPrice) 'Number of Customers',
	   COUNT(DISTINCT OrderNo) 'Number of Sales',
	   (
			SELECT SUM(LineItemPrice)
			FROM (
				SELECT DISTINCT(OrderNo),LineItemPrice FROM [Messy].[dbo].[Messy]
				WHERE SaleDate Like '2015%'
				GROUP BY LineItemPrice, OrderNo 
			) Grouped_Sum 
		) 'Total Sale Price' 
FROM [Messy].[dbo].[Messy] WHERE SaleDate Like '2015%'


-- Q: TOTAL SALE OF THE STORE in 2016 BY PRODUCT PRICE OR LINE NUMBER
SELECT COUNT(DISTINCT LineItemPrice) 'Number of Customers',
	   COUNT(DISTINCT OrderNo) 'Number of Sales',
	   (
			SELECT SUM(LineItemPrice)
			FROM (
				SELECT DISTINCT(OrderNo),LineItemPrice FROM [Messy].[dbo].[Messy]
				WHERE SaleDate Like '2016%'
				GROUP BY LineItemPrice, OrderNo 
			) Grouped_Sum 
		) 'Total Sale Price' 
FROM [Messy].[dbo].[Messy] WHERE SaleDate Like '2016%'


-- Q: LIST OF EXPENSIVE PRODUCTS OVER $300
SELECT DISTINCT(ProductDescription),ProductID,ProductTags,LineItemPrice,(SELECT COUNT(DISTINCT(ProductID)) from [Messy].[dbo].[Messy] where LineItemPrice >300) Frequency 
FROM [Messy].[dbo].[Messy] WHERE LineItemPrice >300


-- Q: LIST OF INEXPENSIVE PRODUCTS UNDER $300
SELECT DISTINCT(ProductDescription),ProductID,ProductTags,LineItemPrice,(SELECT COUNT(DISTINCT(ProductID)) from [Messy].[dbo].[Messy] where LineItemPrice <300) Frequency 
FROM [Messy].[dbo].[Messy] WHERE LineItemPrice <300


-- Q: SUBSTITUTE PRODUCT
--	  THIS QUERY WILL DISPLAY THE PRODUCTS WHICH CAN BE SUBSTITUTED FOR OTHERS, FOR EXAMPLE FOR Garden, DIY, Tools PRODUCT ID 82140 AND 41778
--    CAN BE SUSBTITUTED WITH OTHER AND IT ASLO HAS RECORDS FOR OTHER TYPES OF PRODUCTS AS WELL
SELECT DISTINCT(ProductID),LineItemPrice,ProductDescription,ProductTags FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags LIKE '%GARDEN% %TOOLS%'
ORDER BY ProductTags DESC
SELECT COUNT(DISTINCT(ProductID)) FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags LIKE '%GARDEN% %TOOLS%'

SELECT DISTINCT(ProductID),LineItemPrice,ProductDescription,ProductTags FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags LIKE '%GARDEN% %DIY%'
ORDER BY ProductTags DESC
SELECT COUNT(DISTINCT(ProductID)) FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags LIKE '%GARDEN% %DIY%'
SELECT DISTINCT(ProductID),LineItemPrice,ProductDescription,ProductTags FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags LIKE '%CLEARANCE%'
ORDER BY ProductTags DESC
SELECT COUNT(DISTINCT(ProductID)) FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags LIKE '%CLEARANCE%'
SELECT DISTINCT(ProductID),LineItemPrice,ProductDescription,ProductTags FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags LIKE '%HOME%'
ORDER BY ProductTags DESC
SELECT COUNT(DISTINCT(ProductID)) FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags LIKE '%HOME%'
SELECT DISTINCT(ProductID),LineItemPrice,ProductDescription,ProductTags FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags='TOOLS'
ORDER BY ProductTags DESC
SELECT COUNT(DISTINCT(ProductID)) FROM [Messy].[dbo].[Messy]
WHERE ProductTags<>'NULL' AND ProductTags='TOOLS'


-- Q: LIST OF PERCENT DISCOUNTS FOR THE YEAR
SELECT  DISTINCT DiscountAppliedPc, CAST(SaleDate AS VARCHAR(8)) AS DATE FROM [Messy].[dbo].[Messy]  WHERE DiscountAppliedPc <> 'NULL'


-- Q: LIST OF ABSOLUTE DISCOUNTS FOR THE YEAR
SELECT  DISTINCT DiscountAppliedAbs , CAST(SaleDate AS VARCHAR(8)) AS DATE FROM [Messy].[dbo].[Messy]  WHERE DiscountAppliedAbs IS NOT NULL


-- Q: HOW FREQUENTLY WAS EACH PRODUCT PURCHASED?
SELECT [ProductID], COUNT([ProductID]) AS MOST_FREQUENT
FROM [Messy].[dbo].[Messy] 
GROUP BY [ProductID]
ORDER BY COUNT([ProductID]) DESC



-- 3NF NORMALIZATION OF MESSY TABLE
-------------------------------------

-- ** THERE ARE MANY ATTRIBUTES THAT RELATE TO EACH OTHER IN THIS ONE TABLE:
--   INITIAL GROUPS FOUND THAT CAN BECOME OTHER TABLES:
--		# ORDER
--		# CUSTOMER
--		# PROMO
--		# DISCOUNT
--		# PRODUCT
--		# PTAG
--   JUNCTION TABLES WERE INCLUDED TO SEPARATE DATA FURTHER:
--		# ORDER_PRODUCT
--		# PRODUCT_PTAG


-- THE ORDER TABLE
--------------------
-- THIS SEPARATION WAS MADE FROM THE MESSY TABLE, BECAUSE THERE WERE SEVERAL FIELDS THAT WERE MORE CONNECTED TO HOLD THE MAIN ORDER INFORMATION.
-- 1NF: IT CONTAINS A PRIMARY KEY, ORDERID, AS AN INT 
--		BR:	INT WAS USED TO HANDLE INDEXING BETTER.
--		BR:	ALSO, IT IS EASIER TO DISPLAY THIS ID TO THE CUSTOMER ON SUCCESSFUL TRANSACTION FOR THEIR RECORDS.
-- 2NF: THE ORDERNO COLUMN HAS BEEN RETAINED AS A VARCHAR AS A TEMPORARY REFERENCE.
--		BR: IT IS POSSIBLE THAT IT MAY BE USED IN DOCUMENTAION OR OTHER SYSTEMS, SO IT WILL BE RETAINED UNTIL ANY SOURCES
--			HAVE BEEN ADJUSTED TO USE THE NEW ORDER ID COLUMN INSTEAD.
-- 2NF: SALEDATE IS DIRECTLY RELATED TO THE ORDERID
--		BR: IT WAS RENAMED TO ORDERDATE FOR CONSISTENCY AND STORED AS A TIMESTAMP.
-- 2NF: NEWTOTALPRICE IS DIRECTLY RELATED TO THE ORDERID
--		BR: IT WAS RENAMED TO ORDERPRICE AND WAS ALSO RETAINED AS A QUICK REFERENCE AND AS VERIFICATION OF ANY CALCULATIONS.
-- 2NF: CUSTOMERID WAS CREATED AND IS FULLY DEPENDENT ON THE ORDERID
--		BR: ORDER STILL HAS A CONNECTION TO CUSTOMERS, SINCE A CUSTOMER CAN MAKE AT LEAST ONE ORDER, BUT THE CUSTOMER INFORMATION WAS
--			NOT DIRECTLY LINKED TO AN ORDER, AND SO IT WAS EXCLUDED, RETAINING A CUSTOMER ID AS A FOREIGN KEY.
-- 2NF: PROMOID WAS CREATED AND IS FULLY DEPENDENT ON THE ORDERID
--		BR: ORDER ALSO HAS A CONNECTION TO PROMOTIONS, SINCE THESE DETERMINE ANY CUSTOMER DISCOUNTS ON THE ORDER PRICE. HENCE A FOREIGN KEY
--			OF PROMOID WAS CREATED TO MAINTAIN THE LINK.
-- 3NF: NONE OF THE NON-KEY ATTRIBUTES HAS ANY DEPENDENCIES AMONGST THEMSELVES 


-- THE CUSTOMER TABLE
----------------------
-- THIS SEPARATION WAS MADE FROM THE MESSY TABLE BECAUSE THERE WERE SEVERAL FIELDS THAT WERE MORE DEPENDENT ON HOLDING CUSTOMER INFORMATION ALONE.
-- 1NF:	IT CONTAINS A PRIMARY KEY, CUSTOMERID, AS AN INT
-- 2NF:	THE CUSTOMERNAME COLUMN IS FULLY DEPENDENT ON THE CUSTOMERID
--		BR: THE ORIGINAL COLUMN WAS SPLIT INTO FIRSTNAME AND LASTNAME INSTEAD. SINCE THE COMPANY IS INTERESTED IN ITS REPEAT CUSTOMERS,
--			IT WOULD BE MORE EFFECTIVE TO ADDRESS CUSTOMERS BY THEIR FIRST NAMES IN EMAIL CAMPAIGNS. 
--			SO THE SPLIT HELPS WITH CONVENIENCE.
-- 2NF: THE CUSTOMERADDRESS1 IS FULLY DEPENDENT ON CUSTOMERID
--		BR: THE ORIGINAL CUSTOMERADDRESS1 WAS SPLIT INTO STREETNO AND STREETNAME, BOTH VARCHARS, TO BETTER ACCOMMODATE STREET NAME SEARCHES.
--		BR: IT ALSO HELPS TO SEPARATE THE STREET NUMBER TO ACCOMMODATE DIFFERENT FORMATS, SUCH AS LETTERS.
--		BR: THE STREET SUFFIXES WILL BE CONSISTENT, USING THE UNABBREVIATED VERSIONS, EXAMPLE: BOULEVARD INSTEAD OF BLVD.
-- 2NF: THE CUSTOMERADDRESS2 COLUMN IS FULLY DEPENDENT ON CUSTOMERID
--		BR: IT WAS RENAMED TO CITY SINCE IT REPRESENTS THE CITY EACH CUSTOMER LIVES IN.
-- 3NF:	THE CUSTOMERADDRESS3 AND CUSTOMERADDRESS4 COLUMNS WERE MERGED SINCE THEY WERE DEEMED TO BE COMPETING COLUMNS AT THE SAME LEVEL, 
--		AS IDENTIFIED IN THE INCONSISTENCIES. THEY SEEMED TO BE DEPENDENT ON EACH OTHER.
-- 2NF: THE MERGED COLUMN WAS NAMED REGION AND IS DEPENDENT ON THE CUSTOMERID.
-- 2NF: CUSTOMERADDRESS4 IS FULLY DEPENDENT ON THE CUSTOMERID
--		BR: IT WAS RENAMED TO POSTALCODE, SINCE IT WAS CONSIDERED TO CONTAIN POSTAL CODE INFORMATION
-- 2NF: PHONENO IS FULLY DEPENDENT ON THE CUSTOMERID
-- 2NF: CUSTOMEREMAIL IS FULLY DEPENDENT ON THE CUSTOMERID
--		BR: IT WAS RENAMED TO EMAIL FOR SIMPLICITY
-- 3NF: THERE ARE NOW NO INTERDEPENCIES AMONG COLUMNS


-- THE PROMO TABLE
-------------------
-- IT WAS DECIDED THAT PROMOCODES SHOULD BE SEPARATED INTO ITS OWN TABLE, SINCE THEY LACKED ANY FULL RELATIONSHIP WITH OTHER COLUMNS
-- BASED ON ANALYSIS AND DEEP QUERIES, THIS TABLE HAS THE POTENTIAL TO SERVICE OTHER TABLES THAN JUST ORDER IN THE FUTURE AND NEEDS TO
-- BE BUILT WITH THIS IN MIND.
-- 1NF: THE PROMO TABLE CONTAINS A PRIMARY KEY, PROMOID, WITH DATA TYPE INT
-- 2NF: THE PROMOCODE COLUMN WAS ADDED TO THE TABLE SINCE IT IS FULLY DEPENDENT ON THE PROMOID.
--		BR: PROMOCODES WILL NOT BE RE-USED WITH DIFFERENT AMOUNT VALUES, AS THEY HELP CREATE A REFERENCE TO AN ORDER IF AN AUDIT WERE TO EVER OCCUR.
--		BR: THEY WILL BE ARCHIVED INSTEAD (ARCHIVE PROCESS FOR ANOTHER TIME).
-- 2NF: MANY PROMOS ARE STILL LINKED TO A SPECIFIC DISCOUNT, SO DISCOUNTID WAS ADDED AS A FOREIGN KEY
-- 3NF: TABLE IS IN 2NF AND THERE ARE NO MORE ATTRIBUTES TO INSPECT, SO IT IS IN 3NF AS WELL


-- THE DISCOUNTPER TABLE
-------------------------
-- IT WAS DECIDED THAT THE DISCOUNT PERCENT INFORMATION SHOULD BE SEPARATED INTO ITS OWN TABLE, AWAY FROM THE DISCOUNT DOLLAR INFORMATION
--		BR: EVEN THOUGH DISCOUNTAPPLIEDPC AND DISCOUNTAPPLIEDABS WERE RELATED BY DISCOUNT TYPE, THEY DO NO SHARE THE SAME DISCOUNT ID.
--			THERE IS NO OVERLAP. SEPARATING THEM ALLOWS THE PROMO TABLE TO IDENTIFY WHICH DISCOUNT IS BEING APPLIED BY ID OR NULL
-- 1NF: IT CONTAINS A PRIMARY KEY, DISCOUNTPERID, AS AN INT
-- 2NF: DISCOUNTAPPLIEDPC IS FULLY DEPENDENT ON DISCOUNTPERID
--		BR: IT WAS RENAMED TO DISCOUNTPER AND CHANGED FROM VARCHAR TO NUMERIC
-- 3NF: THERE ARE NO OTHER ATTRIBUTES AND TABLE IS IN 2NF, SO BY DEFAULT IT IS IN 3NF AS WELL.


-- THE DISCOUNTABS TABLE
-------------------------
-- IT WAS DECIDED THAT THE DISCOUNT PERCENT INFORMATION SHOULD BE SEPARATED INTO ITS OWN TABLE. SEE BR ABOVE FOR DISCOUNTPER.
-- 1NF: IT CONTAINS A PRIMARY KEY, DISCOUNTABSID, AS AN INT
-- 2NF: DISCOUNTAPPLIEDABS IS FULLY DEPENDENT ON DISCOUNTABSID
--		BR: IT WAS RENAMED TO DISCOUNTABS.
--		BR: MAXIMUM VALUE IS $9999.99. ANYTHING HIGHER WILL BE REQUIRE A DISCOUNTPER INSTEAD
-- 3NF: THERE ARE NO OTHER ATTRIBUTES AND TABLE IS IN 2NF, SO BY DEFAULT IT IS IN 3NF AS WELL.


-- THE PRODUCT TABLE
---------------------
-- IT WAS DECIDED INFORMATION DEPENDENT ON THE PRODUCTID OF THE MESSY TABLE WOULD BE SEPARATED INTO ITS OWN TABLE.
-- 1NF: IT CONTAINS A PRIMARY KEY, PRODUCTID, DECLARED AS AN INT
-- 2NF: PRODUCTDESCRIPTION IS FULLY DEPENDENT ON THE PRODUCTID
--		BR: IT IS TOO SHORT AND REQUIRES MORE INFORMATION IN THE FUTUTRE
--		BR: IT WILL HAVE A NOT NULL CONSTRAINT TO ENSURE ALL PRODUCTS HAVE A DESCRIPTION,
--			PRODUCTS WITHOUT DESCRIPTIONS WILL HAVE A DEFAULT VALUE UNTIL THE MISSING VALUES HAVE BEEN PROVIDED,
--			AS MENTIONED IN THE INCONSISTENCIES.
-- 2NF: THE LINEITEMPRICE COLUMN IS FULLY DEPENDENT ON PRODUCTID
--		BR: IT WAS DEEMED TO BE THE PRODUCT PRICE AND WAS RENAMED PRODUCTPRICE, WITH A DATA TYPE OF NUMERIC.
-- 3NF: THERE ARE NO TRANSITIVE DEPENDENCIES WITHIN THE TABLE


-- THE PTAG TABLE
------------------
-- IT WAS DECIDED TO TAKE THE PRODUCTTAGS COLUMNS AND SPLIT THEM INTO THEIR UNIQUES VALUES IN ATTEMPTS TO CREATE A LOOKUP TABLE.
-- 1NF: A PRIMARY KEY WAS CREATED, CALLED PTAGID, AS AN INT
-- 2NF: THE PTAGE DESCRIPTION IS UNIQUE FOR EACH PTAGID
--		BR: AS MENTIONED IN THE INCONSISTENCIES, THESE INDIVIDUAL TAGS COULD EASILY BE UPDATED AND QUERIED AS A COMMA SEPARATED STRING
--			FOR EACH OF THE PRODUCTS. ALTHOUGH IT COULD BE ARGUED THAT THE STRING OF PTAGS WOULD BE FULLY DEPENDENT ON THE PRODUCTID, THIS 
--			SEPARATION INTO UNIQUE ITEMS BREAKS THAT DEPENDENCY. THE ITEMS ARE NOW STAND ALONE, DEPENDENT ON THEIR OWN PRIMARY KEY.
--	3NF: THERE ARE ONLY TWO COLUMNS IN THIS TABLE THAT SATISFY 2NF AND THUS, 3NF AS WELL IN THIS CASE


-- THE PRODUCTXPTAG TABLE
---------------------------
-- A JUNCTION TABLE, PRODUCTXPTAG, WAS CREATED TO ACCOMMODATE THE MANY-TO-MANY RELATIONSHIP BETWEEN PTAG AND PRODUCT TABLES
-- 1NF: IT CONSISTS OF A COMPOSITE PRIMARY KEY OF PTAGID AND PRODUCTID, BOTH INT
--		BR: THESE KEYS ARE ALSO THE FOREIGN KEYS CREATING A LINK BACK TO EACH CORRESPONDING TABLE.
-- 2NF: TABLE ONLY CONTAINS COMPOSITE PRIMARY KEYS. THERE ARE NO NON-KEY ATTRIBUTES, SO BY DEFAULT TABLE IS IN 2NF AS WELL.
-- 3NF: BY DEFAULT, SINCE TABLE IS IN 2NF AND THERE ARE NON-KEY ATTRIBUTES TO INSPECT, THE TABLE IS IN 3NF AS WELL.


-- ORDERXPRODUCT TABLE
-----------------------
-- THIS JUNCTION TABLE WAS CREATED TO ACCOMMODATE THE MANY-TO-MANY RELATIONSHIP BETWEEN ORDER AND PRODUCT.
-- 1NF: IT CONSISTS OF A COMPOSITE PRIMARY KEY OF ORDERID AND PRODUCTID, WHICH ARE ALSO THE FOREIGN KEYS IN THE TABLE.
-- 2NF: THE QUANTITY COLUMN, OF DATA TYPE INT, IS FULLY DEPENDENT ON THE COMPOSITE PRIMARK KEY
--		BR: THIS COLUMN STORES THE NUMBER OF PRODUCTS FOR A GIVEN PRODCUTID WITHIN A GIVEN ORDERID.
--			THIS REDUCES THE DUPLICATES ORIGINALLY SEEN IN THE MESSY TABLE WHEN THE ORDERNO WAS DUPLICATED AND EACH ROW
--			CONTAINED A NEWLINEITEM
-- 3NF: THERE IS ONLY ONE NON-KEY ATTRIBUTE IN THIS TABLE THAT SATISFIES 2NF AND THUS, SATISFIES 3NF AS WELL IN THIS CASE


-- CALCULATED VIEWS
--------------------
-- BR: REPEATCUSTOMER CAN BE GENERATED BY SELECTING ALL CUSTOMERS THAT HAVE PLACED AT LEAST 2 ORDERS FOR 'YES', OTHERWISE DISPLAY 'NO'
-- BR: TOTALSALEPRICE IS THE ORDER PRICE PRIOR TO APPLYING A PROMOCODE, WHICH CAN BE GENERATED WITH THE SUM OF PRODUCTPRICE * QUANTITY IN EACH ORDER


-- CREATE TABLES
-----------------
-- ** CREATE A NEW DATABASE CALLED 3NFMessy OR ADJUST THE DATABASE NAME AS DESIRED
CREATE DATABASE [3NFMessy6];

-- USE NEW DATABASE
USE [3NFMessy6];

-- CREATE CUSTOMER TABLE
CREATE TABLE [Customer] (
  [CustomerID]	INT			  NOT NULL  IDENTITY,
  [FirstName]	NVARCHAR(50)  NOT NULL,
  [LastName]	NVARCHAR(50)  NOT NULL,
  [StreetNo]	NVARCHAR(10)  NOT NULL,
  [StreetName]	NVARCHAR(50)  NOT NULL,
  [City]		NVARCHAR(50)  NOT NULL,
  [Region]		NVARCHAR(50)  NOT NULL,
  [PostalCode]	NVARCHAR(10)  NOT NULL,
  [PhoneNo]		NVARCHAR(20)  NOT NULL,
  [Email]		NVARCHAR(120) NULL,
  [OrderID]		INT			  NOT NULL
  CONSTRAINT PK_Customer PRIMARY KEY ([CustomerID])
);
--------------------------------------------------------

-- CREATE DISCOUNT PERCENT TABLE
CREATE TABLE [DiscountPrc] (
  [DiscountPrcID] INT		   NOT NULL IDENTITY,
  [DiscountPrc]   NUMERIC(5,0) NOT NULL DEFAULT 0,
  CONSTRAINT PK_DiscountPrc PRIMARY KEY ([DiscountPrcID])
);
--------------------------------------------------------

-- CREATE DISCOUNT ABSOLUTE TABLE
CREATE TABLE [DiscountAbs] (
  [DiscountAbsID] INT		   NOT NULL IDENTITY,
  [DiscountAbs]	  NUMERIC(6,2) NOT NULL DEFAULT 0,
  CONSTRAINT PK_DiscountAbs PRIMARY KEY ([DiscountAbsID])
);
--------------------------------------------------------

-- CREATE PROMO TABLE
CREATE TABLE [Promo] (
  [PromoID]		  INT		   NOT NULL  IDENTITY,
  [PromoCode]	  NVARCHAR(20) NOT NULL	 UNIQUE,
  [DiscountPrcID] INT		   NULL,
  [DiscountAbsID] INT		   NULL,
  CONSTRAINT PK_Promo PRIMARY KEY ([PromoID]),
  CONSTRAINT FK_Promo_DiscountPrc FOREIGN KEY (DiscountPrcID) REFERENCES [DiscountPrc]([DiscountPrcID]),
  CONSTRAINT FK_Promo_DiscountAbs FOREIGN KEY (DiscountAbsID) REFERENCES [DiscountAbs]([DiscountAbsID])
);
--------------------------------------------------------

-- CREATE ORDER TABLE
CREATE TABLE [Order] (
  [OrderID]		INT			  NOT NULL  IDENTITY,
  [OrderNo]		NVARCHAR(36)  NULL,
  [OrderDate]	TIMESTAMP	  NOT NULL,
  [OrderPrice]	NUMERIC(10,2) NOT NULL  DEFAULT 0,
  [CustomerID]	INT			  NOT NULL,
  [PromoID]		INT			  NULL,
  CONSTRAINT PK_Order PRIMARY KEY ([OrderID]),
  CONSTRAINT FK_Order_Customer FOREIGN KEY ([CustomerID]) REFERENCES [Customer]([CustomerID]),
  CONSTRAINT FK_Order_Promo FOREIGN KEY ([PromoID]) REFERENCES [Promo]([PromoID])
);
--------------------------------------------------------

-- CREATE PRODUCT TABLE
CREATE TABLE [Product] (
  [ProductID]		   INT			  NOT NULL  IDENTITY,
  [ProductDescription] NVARCHAR(1000) NOT NULL  DEFAULT '...',
  [ProductPrice]	   NUMERIC(10,2)  NOT NULL  DEFAULT 0,
  CONSTRAINT PK_Product PRIMARY KEY ([ProductID])
);
--------------------------------------------------------

-- CREATE PTAG TABLE
CREATE TABLE [PTag] (
  [PTagID]			INT			 NOT NULL  IDENTITY,
  [PTagDescription] NVARCHAR(50) NOT NULL  DEFAULT '...',
  CONSTRAINT PK_PTag PRIMARY KEY ([PTagID])
);
--------------------------------------------------------

-- CREATE PRODUCTxPTAG JUNCTION TABLE
CREATE TABLE [ProductXPTag] (
  [ProductID] INT NOT NULL  IDENTITY,
  [PTagID]	  INT NOT NULL,
  CONSTRAINT PK_ProductXPTag PRIMARY KEY ([ProductID],[PTagID]),
  CONSTRAINT FK_ProductXPTag_Product FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID]),
  CONSTRAINT FK_ProductXPTag_PTag FOREIGN KEY ([PTagID]) REFERENCES [PTag]([PTagID])
);
--------------------------------------------------------

-- CREATE ORDERxPRODUCT JUNCTION TABLE
CREATE TABLE [OrderXProduct] (
  [OrderID]	  INT NOT NULL  IDENTITY,
  [ProductID] INT NOT NULL,
  [Quantity]  INT NOT NULL,
  CONSTRAINT PK_OrderXProduct PRIMARY KEY ([OrderID],[ProductID]),
  CONSTRAINT FK_OrderXProduct_Order FOREIGN KEY ([OrderID]) REFERENCES [Order]([OrderID]),
  CONSTRAINT FK_OrderXProduct_Product FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
);
--------------------------------------------------------

-- INSERT STATEMENTS
---------------------

-- INSERT INTO DISCOUNT PERCENT TABLE
SET IDENTITY_INSERT DiscountPrc ON;
INSERT INTO DiscountPrc(DiscountPrcID, DiscountPrc)
VALUES (1, 5),
	   (2, 10),
	   (3, 15);
SET IDENTITY_INSERT DiscountPrc OFF;
--------------------------------------------------------

-- INSERT INTO DISCOUNT ABSOLUTE TABLE
SET IDENTITY_INSERT DiscountAbs ON;
INSERT INTO DiscountAbs(DiscountAbsID, DiscountAbs)
VALUES (1, 5),
	   (2, 10);
SET IDENTITY_INSERT DiscountAbs OFF;
---------------------------------------------------------

-- INSERT INTO PTAG TABLE
SET IDENTITY_INSERT PTag ON;
INSERT INTO PTag(PTagID, PTagDescription)
VALUES (1, N'Clearance'),
	   (2, N'DIY'),
	   (3, N'Garden'),
	   (4, N'Home'),
	   (5, N'Tools');
SET IDENTITY_INSERT PTag OFF;
--------------------------------------------------------

-- INSERT INTO PRODUCT TABLE
SET IDENTITY_INSERT Product ON;
INSERT INTO Product(ProductID, ProductDescription, ProductPrice)
VALUES	(41778, N'Perobonower', 302.62),
		(233431, N'Inwerpentor', 263.28),
		(513815, N'Trueristor', 129.43),
		(592387, N'Becad', 275.18),
		(598100, N'Persapplazz', 177.66),
		(612799, N'Surmunan', 399.10),
		(705546, N'Frevenimor', 189.97),
		(947644, N'Tapwerpover', 274.52),
		(951875, N'Pevenentor', 156.00),
		(966521, N'Pddrwetta', 280.52),
		(1914, N'Topcadedg', 478.36),
		(2490, N'Dopzapax', 45.95),
		(5243, N'Taptindel', 331.83),
		(15922, N'Pertinic', 353.52),
		(22434, N'Lomtumeficator', 392.98),
		(32318, N'Surwerpower', 224.42),
		(39377, N'Difbvierv', 287.29),
		(53158, N'Rapwerpepicator', 189.06),
		(187628, N'Thrubanicentor', 91.29),
		(190088, N'Fradimimax', 65.00),
		(226376, N'Upkilpl', 45.50),
		(318191, N'Recadedgar', 238.53),
		(360208, N'Hapsipinistor', 123.50),
		(364277, N'Supduddel', 163.66),
		(374670, N'Endpebicator', 160.6),
		(397712, N'Tiptumax', 415.92),
		(416516, N'Topweredgex', 494.03),
		(421139, N'Frowerpicator', 78.26),
		(471175, N'Montumanicator', 284.09),
		(475960, N'Vardudax', 28.18),
		(483667, N'Upwerp', 237.85),
		(516914, N'Puroban', 59.82),
		(523160, N'Cipzapantor', 297.49),
		(560628, N'Mewerazz', 99.7),
		(563266, N'Surmunegin', 209.09),
		(642726, N'Pesapimex', 338.96),
		(647368, N'Grorobolldel', 99.99),
		(677284, N'Grokiledax', 143.22),
		(697332, N'Lkjhbfvierr', 491.99),
		(753977, N'Zeetinindel', 373.28),
		(801382, N'Vardimoll', 23.05),
		(836831, N'Cipkilan', 1.00),
		(850391, N'Pujubepentor', 412.34),
		(862541, N'Barmunadin', 413.53),
		(915544, N'Zeejubamin', 22.25),
		(917229, N'Frotinantor', 322.53);
SET IDENTITY_INSERT Product OFF;
--------------------------------------------------------

-- INSERT INTO PRODUCTxPTAG TABLE
SET IDENTITY_INSERT ProductXPTag ON;
INSERT INTO ProductXPTag(ProductID, PTagID)
VALUES	(41778, 2),
		(41778, 3),
		(41778, 5),
		(233431, 2),
		(233431, 3),
		(513815, 2),
		(513815, 3),
		(598100, 2),
		(598100, 3),
		(598100, 5),
		(612799, 2),
		(612799, 3),
		(951875, 2),
		(951875, 3),
		(1914, 2),
		(1914, 3),
		(2490, 3),
		(2490, 2),
		(5243, 1),
		(15922, 1),
		(22434, 1),
		(32318, 5),
		(39377, 5),
		(53158, 1),
		(187628, 5),
		(187628, 1),
		(190088, 5),
		(226376, 5),
		(318191, 1),
		(360208, 5),
		(364277, 1),
		(374670, 2),
		(374670, 4),
		(397712, 5),
		(397712, 1),
		(416516, 1),
		(421139, 1),
		(471175, 3),
		(471175, 2),
		(475960, 5),
		(475960, 3),
		(475960, 2),
		(483667, 1),
		(516914, 1),
		(523160, 5),
		(523160, 3),
		(523160, 2),
		(560628, 1),
		(563266, 2),
		(563266, 3),
		(592387, 1),
		(642726, 1),
		(642726, 4),
		(647368, 5),
		(677284, 1),
		(697332, 1),
		(705546, 1),
		(753977, 1),
		(801382, 1),
		(836831, 1),
		(850391, 1),
		(862541, 1),
		(915544, 5),
		(915544, 1),
		(917229, 1),
		(947644, 1),
		(966521, 1);
SET IDENTITY_INSERT ProductXPTag OFF;
--------------------------------------------------------

-- INSERT INTO PROMO TABLE
SET IDENTITY_INSERT Promo ON;
INSERT INTO Promo(PromoID, PromoCode, DiscountPrcID, DiscountAbsID)
VALUES (1, N'DISCOUNT10', 2, NULL),
	   (2, N'STAFFDISC', 1, NULL),
	   (3, N'FIVEOFF', NULL, 1),
	   (4, N'PROMO10', NULL, 2),
	   (5, N'SPRING15', 3, NULL);
SET IDENTITY_INSERT Promo OFF;
--------------------------------------------------------

-- INSERT INTO CUSTOMER TABLE
SET IDENTITY_INSERT Customer ON;
INSERT INTO Customer(CustomerID, FirstName, LastName, StreetNo, StreetName, City, Region, PostalCode, PhoneNo, Email, OrderID)
VALUES (1, N'Dexter', N'Lowery', N'19', N'North Milton Parkway', N'Mitcheldean', N'Gloucestershire', N'LW6 1RQ', N'01111483955', N'teergee@gmail.com', 2),
	   (2, N'Marjorie', N'Leach', N'494', N'East Fabien Boulevard', N'Isle of Tiree', N'Wigtownshire', N'KW6 1QE', N'02171858372', N'ghhvrpyb.tomho@fagpjb.net', 1),
	   (3, N'Gloria', N'Alexander', N'243', N'Green Milton Boulevard', N'Potters Bar', N'Aberdeenshire', N'TF9 9PZ', N'02117427904', N'vewldpmc.ejgusbf@lprsi.khewzg.net', 3),
	   (4, N'Heath', N'Bray', N'72', N'New Drive', N'Crowthorne', N'Hampshire', N'NP4 9TO', N'01771982756', N'ghhvrpyb.tomho@fagpjb.net', 4),
	   (5, N'Jermiah', N'McDowell', N'27', N'Old Drive', N'Welling', N'Ross', N'KW9 8US', N'07217 488409', N'bjtop59@nqvuxkf.xnwvab.com', 5),
	   (6, N'Lorie', N'Galloway', N'61', N'East Rocky Nobel Avenue', N'Welling', N'Ross', N'KW9 8VS', N'07217488409', N'bjtop59@nqvuxkf.xnwvab.com', 6),
	   (7, N'Sergio', N'Perry', N'536', N'Oak Parkway', N'Bagillt', N'Inverness-shire', N'LA5 2VP', N'07222646556', N'lvxcsncu392@vrwxhh.org', 7),
	   (8, N'Tamara', N'West', N'124', N'Rocky Old Way', N'Reading', N'Tyne and Wear', N'LB5 2VR', N'02712584913', N'sgyzo@zamqsw.com', 8),
	   (9, N'Tara', N'Lucas', N'452', N'Oak Boulevard', N'Erith', N'Sussex', N'SN65 6XW', N'02772790890', N'zrawiawv@oqum.v-fngq.com', 9),
	   (10, N'Theresa', N'McDowell', N'466', N'Oak Street', N'Erith', N'Sussex', N'DT12 5XJ', N'01112753726', N'vmovgehw544@nrgafm.org', 10);
SET IDENTITY_INSERT Customer OFF;
--------------------------------------------------------

-- INSERT INTO ORDER TABLE
SET IDENTITY_INSERT [Order] ON;
INSERT INTO [Order](OrderID, OrderNo, OrderPrice, CustomerID, PromoID)
VALUES (1, N'00A950D7-1F73-4416-80CE-F0EF58959759', 1532.89, 2, 1),
	   (2, N'17E53F18-2096-4F2A-A191-7A2E0C4B91F0', 745.07, 1, NULL),
	   (3, N'2A8EA7BA-13E3-4FD3-8A47-43ED848884E2', 1304.00, 3, 2),
	   (4, N'3E0F8D30-3362-4EF6-AC28-EC914CDCD144', 538.18, 4, NULL),
	   (5, N'A8EDA2EE-B84E-4620-AF42-76C2F5D5FBD7', 686.47, 5, 3),
	   (6, N'B15F8E30-2C1B-45EE-97FA-5F67CD5E7D57', 1440.49, 6, NULL),
	   (7, N'B74AB587-912D-4D4F-A7EC-71E4468000CC', 832.08, 7, 4),
	   (8, N'BB6CE780-1FAA-465A-A6B1-05111605A38F', 1424.46, 8, 5),
	   (9, N'BF406A3A-D60E-4EF9-976E-90B7D66F3050', 1552.71, 9, NULL),
	   (10, N'F2784E8E-E08D-4D85-B168-E393301D3E0D', 1468.35, 10, 5);
SET IDENTITY_INSERT [Order] OFF;
--------------------------------------------------------

-- INSERT INTO ORDERxPRODUCT JUNCTION TABLE
SET IDENTITY_INSERT OrderXProduct ON;
INSERT INTO OrderXProduct(OrderID, ProductID, Quantity)
VALUES	(1, 598100, 1),
		(1, 513815, 1),
		(1, 947644, 1),
		(1, 592387, 1),
		(1, 966521, 1),
		(1, 233431, 1),
		(1, 41778, 1),
		(2, 951875, 1),
		(2, 612799, 1),
		(2, 705546, 1),
		(3, 5243, 1),
		(3, 187628, 1),
		(3, 360208, 1),
		(3, 475960, 1),
		(3, 563266, 1),
		(3, 642726, 1),
		(3, 753977, 1),
		(4, 1914, 1),
		(4, 516914, 1),
		(4, 647368, 1),
		(5, 22434, 1),
		(5, 523160, 1),
		(5, 836831, 1),
		(6, 1914, 1),
		(6, 39377, 1),
		(6, 226376, 1),
		(6, 374670, 1),
		(6, 697332, 1),
		(6, 915544, 1),
		(7, 2490, 1),
		(7, 190088, 1),
		(7, 471175, 1),
		(7, 560628, 1),
		(7, 850391, 1),
		(8, 15922, 1),
		(8, 32318, 1),
		(8, 41778, 1),
		(8, 318191, 1),
		(8, 647368, 1),
		(8, 677284, 1),
		(8, 862541, 1),
		(9, 1914, 1),
		(9, 53158, 1),
		(9, 364277, 1),
		(9, 612799, 1),
		(9, 917229, 1),
		(10, 1914, 1),
		(10, 397712, 1),
		(10, 416516, 1),
		(10, 421139, 1),
		(10, 483667, 1),
		(10, 801382, 1);
SET IDENTITY_INSERT OrderXProduct OFF;
--------------------------------------------------------

-- CONFIRMING RECORDS WERE ADDED

SELECT * FROM [3NFMessy6].[dbo].[Customer]

SELECT * FROM [3NFMessy6].[dbo].[Order]

SELECT * FROM [3NFMessy6].[dbo].[DiscountPrc]

SELECT * FROM [3NFMessy6].[dbo].[DiscountAbs]

SELECT * FROM [3NFMessy6].[dbo].[Promo]

SELECT * FROM [3NFMessy6].[dbo].[Product]

SELECT * FROM [3NFMessy6].[dbo].[PTag]

SELECT * FROM [3NFMessy6].[dbo].[ProductXPTag]

SELECT * FROM [3NFMessy6].[dbo].[OrderXProduct]

------------------------------------------------------------------


-- CROSS REFERENTIAL INTEGRITY ENABLED VIA A NEW BUSINESS RULE
---------------------------------------------------------------
-- BR: THE COMPANY HAS DECIDED THAT THEY ARE INTERESTED IN RETAINING MORE REPEAT CUSTOMERS TO INCREASE THEIR REVENUE SHARE. 
--	   THEY WILL IMPLEMENT A RECOMMENDATION ALGORITHM TO MARKET SIMILAR PRODUCTS THAT THE CUSTOMER HAS PURCHASED EVERY MONTH.
--	   CURRENTLY, AN ORDER IS DEPENDENT ON A CUSTOMER EXISTING BEFORE AN ORDER CAN BE INSERTED.
--	   THIS CAMPAIGN WILL NOW REQUIRE THE CUSTOMER TABLE TO BE DEPENDENT ON THE ORDER TABLE AS WELL.
--	   THE ORDERID STORED AT THE CUSTOMER LEVEL WOULD BE BASED ON THAT ALGORITHM RUN, FOR EXAMPLE: TO DETERMINE THE ORDERID OF THE 
--	   MOST FREQUENTLY PURCHASED ITEMS, OR OF THE LARGEST LIST OF ITEMS, OR OF THE BEST-SELLING ITEMS.  
--	   THIS ID HAS THE POTENTIAL TO CHANGE, BUT IT MUST NEVER BE NULL AND IT MUST ALWAYS BE FROM THE CUSTOMER'S ORDER LIST.
--	   NEW CUSTOMERS ADDED WOULD HAVE THEIR FIRST ORDERID STORED TO START THE MARKETING CAMPAIGN. 
--	   AS A RESULT, ALL CUSTOMERS MUST NOW HAVE AT LEAST ONE PURCHASE IN THE ORDER TABLE.


-- CREATION OF SECOND FOREIGN KEY CONTSTRAINT FOR CROSS-REFERENTIAL INTEGRITY
------------------------------------------------------------------------------
ALTER TABLE [Customer]
ADD CONSTRAINT FK_Customer_Order FOREIGN KEY (OrderID) REFERENCES [Order]([OrderID])

-- BR: WHEN A NEW CUSTOMER IS ADDED, THERE IS NO HISTORY LIST FOR THE ALGORITHM TO CHECK, SO THE DEFAULT ORDERID STORED IS FOR THE NEW ORDER.
--	   THIS NEW ORDERID DOES NOT YET EXIST IN THE ORDER TABLE. HENCE, THE CROSS-REFERENTIAL INTEGRITY IN THIS SITUATION, IS VIOLATED

-- ATTEMPTING TO INSERT NEW CUSTOMER INFORMATION FIRST, THEN CORRESPONDING ORDER INFORMATION
SET IDENTITY_INSERT Customer ON;
INSERT INTO Customer(CustomerID, FirstName, LastName, StreetNo, StreetName, City, Region, PostalCode, PhoneNo, Email, OrderID)
VALUES (11, N'Saran', N'Johnson', 195, N'frergertgvrt', N'Mitchel', N'Gloucester', N'ABC 3Q5', N'06611483955', N'wedjohson@yahoo.com', 11);
SET IDENTITY_INSERT Customer OFF;
-- INSERT FAILS SINCE ORDERID IS NOT IN ORDER TABLE AS YET FOR A NEW CUSTOMER


-- TEMPORARILY DISABLING THE FOREIGN KEY CONSTRAINT
------------------------------------------------------

-- DISABLE CUSTOMER FOREIGN KEY CONSTRAINT TO INSERT THE NEW CUSTOMER RECORD
ALTER TABLE [Customer]
NOCHECK CONSTRAINT FK_Customer_Order

-- INSERTING NEW CUSTOMER INFORMATION FIRST
SET IDENTITY_INSERT Customer ON;
INSERT INTO Customer(CustomerID, FirstName, LastName, StreetNo, StreetName, City, Region, PostalCode, PhoneNo, Email, OrderID)
VALUES (11, N'Saran', N'Johnson', 195, N'frergertgvrt', N'Mitchel', N'Gloucester', N'ABC 3Q5', N'06611483955', N'wedjohson@yahoo.com', 11);
SET IDENTITY_INSERT Customer OFF;

-- THEN CORRESPONDING ORDER INFORMATION WAS ABLE TO ADDED AFTERWARDS
SET IDENTITY_INSERT [Order] ON;
INSERT INTO [Order](OrderID, OrderNo, OrderPrice, CustomerID, PromoID)
VALUES (11, N'14889649-D660-49AD-91F7-1B2948CD7E9E', 150.00, 11, NULL);
SET IDENTITY_INSERT [Order] OFF;


-- RE-ENABLING THE FOREIGN KEY CONSTRAINTS
-------------------------------------------
-- BR: AFTER THE INSERT IS COMPLETE, THE CROSS-REFERENTIAL INTEGRITY MUST BE REINFORCED.

ALTER TABLE [Customer]
CHECK CONSTRAINT FK_Customer_Order

-- BR: THIS CAN BE DONE THE OTHER WAY AROUND, WHERE IF AN ORDER RECORD NEEDED TO BE ADDED BEFORE A CUSTOMER RECORD EXISTED, 
--	   THE FK_ORDER_CUSTOMER FOREIGN KEY CONSTRAINT WOULD HAVE TO BE DISABLED INSTEAD BEFORE AN ORDER RECORD CAN BE PLACED.
--	   HOWEVER, THE RULES OF THE COMPANY REQUIRE THAT A CUSTOMER MUST ALWAYS EXIST BEFORE AN ORDER CAN BE GENERATED.
--	   HENCE, THE REVERSE SCEANRIO WOULD NEVER HAPPEN, SO IT IS NOT SHOWN.






